%% Flight Path Simulation and Plotting

% Simulation parameters
tf = 500;       % Simulation duration in seconds
dt = 0.1;       % Time step (sampling time) in seconds
t = 0:dt:tf-dt; % Time vector
num_samples = length(t); % Number of samples

% Flight path values (in radians)
thetaClimb = deg2rad(10);     % Climb angle in radians
thetaDescent = deg2rad(-10);  % Descent angle in radians
thetaCruise = 0;              % Cruise angle (level flight) in radians
CruiseAlt = 457.2;            % Cruise altitude (1500 ft) in meters

% Initialize flight path variables
theta = thetaClimb; % Initial flight path angle (climb)
psi = 0;            % Initial bank angle

% Initialize aircraft state vectors
x = zeros(1, num_samples);    % Position in x-direction
y = zeros(1, num_samples);    % Position in y-direction
z = zeros(1, num_samples);    % Position in z-direction (altitude)
psiV = zeros(1, num_samples); % Bank angle vector
thetaV = zeros(1, num_samples); % Flight path angle vector
v = 66.88 * ones(1, num_samples); % Constant cruise speed (130kts)

% Initialize distance markers
Lclimb = 0;
Ldist = 0;

for i = 2:num_samples
    % Update position using 2D kinematic equations
    x(i) = x(i-1) + dt * v(i-1) * cos(theta) * cos(psi);
    y(i) = y(i-1) + dt * v(i-1) * cos(theta) * sin(psi);
    z(i) = z(i-1) + dt * v(i-1) * sin(theta);
    
    % Break loop on touchdown and trim unused vector portions
    if z(i) < 0 
        break;
    end

    % Climb phase logic
    if z(i) > CruiseAlt && theta == thetaClimb
        theta = thetaCruise; % Level off at cruise altitude
        Lclimb = x(i);       % Record distance of climb for descent reference
    end
    
    % Bank turn logic after climb phase
    if theta == thetaCruise && psi < deg2rad(90)
        psi = psi + deg2rad(0.3); % Rate one turn to 90 degrees
        if psi >= deg2rad(90)
            Ldist90 = y(i); % Record distance at 90 degrees for descent alignment
            psi = deg2rad(90);
        end
    elseif theta == thetaCruise && psi >= deg2rad(90) && psi < deg2rad(180) && y(i) >= Lclimb
        psi = psi + deg2rad(0.3); % Continue banking towards 180 degrees
        if psi >= deg2rad(180)
            psi = deg2rad(180);
        end
    elseif theta == thetaCruise && psi >= deg2rad(180) && psi < deg2rad(270) && x(i) <= -Lclimb
        psi = psi + deg2rad(0.3); % Continue banking towards 270 degrees
        if psi >= deg2rad(270)
            psi = deg2rad(270);
        end    
    elseif theta == thetaCruise && psi >= deg2rad(270) && psi < deg2rad(360) && y(i) <= Ldist90
        psi = psi + deg2rad(0.3); % Continue banking towards 360 degrees
        if psi >= deg2rad(360)
            psi = deg2rad(360);
        end
    end

    % Descent phase logic
    if psi >= deg2rad(360) && theta == thetaCruise
        theta = thetaDescent; % Start descent after completing 360-degree turn
    end

    % Update psi and theta for plotting
    psiV(i) = psi; 
    thetaV(i) = theta;
end

% Trim unused vector portions based on flight duration
xF = x(1:i);
yF = y(1:i);
zF = z(1:i);
psiVF = psiV(1:i);
thetaVF = thetaV(1:i);
tF = t(1:i);

%% 3D Trajectory plot
figure(1);
plot3(xF, yF, zF, 'LineWidth', 1); grid on;
title('3D Trajectory');
xlabel('x (m)');
ylabel('y (m)');
zlabel('z (m)');
axis equal;

%% Aircraft heading and x position against time
figure(2);
clf; hold on;
yyaxis left
plot(tF, psiVF); % Plot heading angle over time
ylabel('Heading (rad)');
yyaxis right
plot(tF, xF, '-*'); % Plot x position over time
ylabel('x (m)');
grid on;
title('Flight Heading and Position in x');
xlabel('Time (s)');
xlim([0, (length(tF) * dt)]);
hold off;
